stages:
  - lint
  - build
  - test
  - publish
  - docs
  - downstreams

variables:
  zkgroup_ver: "0.7.0"
  DOCKER_TLS_CERTDIR: "/certs"

# from https://forum.gitlab.com/t/prevent-ci-cd-for-release-branches-for-forks/42207/2
.arm-build:
  tags: [arm-builder]
  rules:
    - if: '$CI_PROJECT_NAMESPACE == "signald"'
      when: on_success
    - when: manual
      allow_failure: true

workflow:
  rules:
    - if: '$CI_PROJECT_NAMESPACE != "signald"'
      when: never
    - when: always


services:
  - docker:20.10.0-dind

clang-format:
  image: debian:latest
  stage: lint
  before_script:
    - apt-get update && apt-get install -y clang-format git python3 wget make
  script:
    - ci/format.sh
  needs: []

.build:
  image: openjdk:${JAVA_VERSION}-jdk
  stage: build
  needs: []
  script:
    - 'export "VERSION=$(./version.sh)"'
    - 'echo "Version: ${VERSION}"'
    - ./gradlew installDist
  artifacts:
    paths:
      - build/

build java8 x86_64-unknown-linux-gnu:
  extends: .build
  variables:
    JAVA_VERSION: 8

build java11 x86_64-unknown-linux-gnu:
  extends: .build
  variables:
    JAVA_VERSION: 11

build java8 armv7-unknown-linux-gnueabihf:
  extends: .build
  variables:
    JAVA_VERSION: 8
    SIGNALD_TARGET: armv7-unknown-linux-gnueabihf

build java11 armv7-unknown-linux-gnueabihf:
  extends: .build
  variables:
    JAVA_VERSION: 11
    SIGNALD_TARGET: armv7-unknown-linux-gnueabihf

build java8 aarch64-unknown-linux-gnu:
  extends: .build
  variables:
    JAVA_VERSION: 8
    SIGNALD_TARGET: aarch64-unknown-linux-gnu

build java11 aarch64-unknown-linux-gnu:
  extends: .build
  variables:
    JAVA_VERSION: 11
    SIGNALD_TARGET: aarch64-unknown-linux-gnu

build deb:
  image: registry.gitlab.com/signald/infrastructure/signald-builder-x86:d5e68709
  stage: build
  needs: []
  before_script:
    - export VERSION="$(./version.sh)"
    - export SNAPSHOT="signald-${VERSION}"
    - echo "Building signald version $VERSION"
  script:
    - 'sed -i "s#Architecture: all#Architecture: ${ARCH}#" debian/control'
    - gbp dch --ignore-branch --debian-tag="%(version)s" --git-author --new-version="${VERSION}"
    - CONFIG_SITE=/etc/dpkg-cross/cross-config.amd64 DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -a${ARCH} -Pcross,nocheck
    - mv ../*.deb .
  artifacts:
    paths:
      - "*.deb"
  parallel:
    matrix:
      - SIGNALD_TARGET: [aarch64-unknown-linux-gnu]
        ARCH: arm64
      - SIGNALD_TARGET: [armv7-unknown-linux-gnueabihf]
        ARCH: armhf
      - SIGNALD_TARGET: [x86_64-unknown-linux-gnu]
        ARCH: amd64


build-docker x86:
  image: docker:latest
  stage: build
  needs: []
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - if [[ ! -z "${DOCKER_HUB_USERNAME}" ]]; then docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PASSWORD}; fi
  script:
    - docker build --build-arg "CI_BUILD_REF_NAME=${CI_BUILD_REF_NAME}" --build-arg "CI_COMMIT_SHA=${CI_COMMIT_SHA}" -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
    - if [[ "${CI_COMMIT_REF_SLUG}" == "main" ]]; then docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} ${CI_REGISTRY_IMAGE}:latest; fi;
    - if [[ "${CI_COMMIT_REF_SLUG}" == "main" ]]; then docker push ${CI_REGISTRY_IMAGE}:latest; fi;
    - if [[ ! -z "${DOCKER_HUB_USERNAME}" ]]; then docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} ${DOCKER_HUB_USERNAME}/signald:${CI_COMMIT_REF_SLUG}; fi
    - if [[ ! -z "${DOCKER_HUB_USERNAME}" ]]; then docker push ${DOCKER_HUB_USERNAME}/signald:${CI_COMMIT_REF_SLUG}; fi
    - if [[ ! -z "${DOCKER_HUB_USERNAME}" ]] && [[ "${CI_COMMIT_REF_SLUG}" == "main" ]]; then docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} ${DOCKER_HUB_USERNAME}/signald:latest; fi
    - if [[ ! -z "${DOCKER_HUB_USERNAME}" ]] && [[ "${CI_COMMIT_REF_SLUG}" == "main" ]]; then docker push ${DOCKER_HUB_USERNAME}/signald:latest; fi
  rules:
    - if: '$CI_PROJECT_NAMESPACE == "signald" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: manual

build docker aarch64:
  stage: build
  tags: [arm-docker-builder]
  needs: []
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - if [[ ! -z "${DOCKER_HUB_USERNAME}" ]]; then docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PASSWORD}; fi
  script:
    - docker build --build-arg "CI_BUILD_REF_NAME=${CI_BUILD_REF_NAME}" --build-arg "CI_COMMIT_SHA=${CI_COMMIT_SHA}" -t ${CI_REGISTRY_IMAGE}:aarch64-${CI_COMMIT_REF_SLUG} .
    - docker push ${CI_REGISTRY_IMAGE}:aarch64-${CI_COMMIT_REF_SLUG}
    - if [[ "${CI_COMMIT_REF_SLUG}" == "main" ]]; then docker tag ${CI_REGISTRY_IMAGE}:aarch64-${CI_COMMIT_REF_SLUG} ${CI_REGISTRY_IMAGE}:aarch64-latest; fi;
    - if [[ "${CI_COMMIT_REF_SLUG}" == "main" ]]; then docker push ${CI_REGISTRY_IMAGE}:aarch64-latest; fi;
    - if [[ ! -z "${DOCKER_HUB_USERNAME}" ]]; then docker tag ${CI_REGISTRY_IMAGE}:aarch64-${CI_COMMIT_REF_SLUG} ${DOCKER_HUB_USERNAME}/signald:aarch64-${CI_COMMIT_REF_SLUG}; fi
    - if [[ ! -z "${DOCKER_HUB_USERNAME}" ]]; then docker push ${DOCKER_HUB_USERNAME}/signald:aarch64-${CI_COMMIT_REF_SLUG}; fi
    - if [[ ! -z "${DOCKER_HUB_USERNAME}" ]] && [[ "${CI_COMMIT_REF_SLUG}" == "main" ]]; then docker tag ${CI_REGISTRY_IMAGE}:aarch64-${CI_COMMIT_REF_SLUG} ${DOCKER_HUB_USERNAME}/signald:aarch64-latest; fi
    - if [[ ! -z "${DOCKER_HUB_USERNAME}" ]] && [[ "${CI_COMMIT_REF_SLUG}" == "main" ]]; then docker push ${DOCKER_HUB_USERNAME}/signald:aarch64-latest; fi
  rules:
    - if: '$CI_PROJECT_NAMESPACE == "signald" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: manual

integration tests x86:
  image: openjdk:11-jdk
  stage: test
  needs: []
  before_script:
    - cp tools/log4j2.xml src/main/resources/log4j2.xml
  script:
    - ./gradlew integrationTest --info
  variables:
    SIGNAL_URL: https://signal-server.signald.org
  artifacts:
    reports:
      junit: build/test-results/integrationTest/TEST-*.xml

integration tests aarch64-unknown-linux-gnu:
  image: debian
  stage: test
  tags: [arm-builder]
  needs: []
  before_script:
    - apt update && apt install -y make openjdk-11-jdk-headless
  script:
    - ./gradlew integrationTest --info
  variables:
    SIGNAL_URL: https://signal-server.signald.org
  artifacts:
    reports:
      junit: build/test-results/integrationTest/TEST-*.xml
  rules:
    - if: '$CI_PROJECT_NAMESPACE == "signald" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: manual

integration tests x86_64-apple-darwin:
  image: debian
  stage: test
  tags: [darwin-builder]
  needs: []
  before_script:
    - apt update && apt install -y make openjdk-11-jdk-headless
  script:
    - export PATH=/usr/local/opt/openjdk/bin:$PATH # work around issue with brew installed java
    - ./gradlew integrationTest --info
  after_script:
    - rm -rf ~/.config/signald
  variables:
    SIGNAL_URL: https://signal-server.signald.org
  artifacts:
    reports:
      junit: build/test-results/integrationTest/TEST-*.xml
  rules:
    - if: '$CI_PROJECT_NAMESPACE == "signald" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: manual
      allow_failure: true

publish debian packages:
  image: registry.gitlab.com/signald/infrastructure/signald-builder-x86:d5e68709
  stage: publish
  tags: [deb-signer]
  needs: ["build deb"]
  script:
    - tools/aptly-publish.sh
  variables:
    DISTRIBUTION: unstable
  rules:
    - if: '$CI_PROJECT_NAMESPACE == "signald"'
      when: on_success
    - when: manual
      allow_failure: true

validate protocol:
  image: golang:latest
  stage: docs
  before_script:
    - apt-get update && apt-get install -y openjdk-11-jdk-headless
  script:
    - build/install/signald/bin/signald --dump-protocol > protocol.json
  needs: ["build java11 x86_64-unknown-linux-gnu"]
  artifacts:
    paths:
      - protocol.json

docs.signald.org:
  stage: downstreams
  needs: ["validate protocol"]
  trigger: signald/docs.signald.org
  only:
    - main

